name: Reusable TODO-or-not workflow

on:
  workflow_call:
    inputs:
      issues:
        description: 'If true, will generate issues from TODO/FIXMEs found. Otherwise, TODO/FIXMEs will just be printed to workflow logs'
        required: true
        default: true
        type: boolean
      max_issues:
        description: 'Maximum number of issues todoon may generate, if any more are attempted then the run will fail'
        required: true
        default: 10
        type: number
      closed_issue_check:
        description: 'If true, todoon will fail if any more than specified number of closed issues are found (set to -1 to allow any closed issues)'
        required: true
        default: 0
        type: number
      can_fail:
        description: 'If true, todoon will exit nonzero if any TODO/FIXMEs found'
        required: true
        default: true
        type: boolean
      verbosity:
        description: '0: --very-quiet (none) | 1: --quiet (summary) | 2: (default) | 3: --verbose (all)'
        required: true
        default: 2
        type: number
      python_version:
        description: 'Version of Python to use (defaults to 3.11.7)'
        required: true
        default: "3.11.7"
        type: string
      todoon_version:
        description: 'Version of todoon to use (defaults to latest)'
        required: false
        type: string
    secrets:
      todoon_client_pem:
        description: 'Client PEM for TODO-Or-Not'
        required: true

jobs:
  run_todoon:
    runs-on: ubuntu-latest
    environment: testing
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python_version }}
      #
      - name: Generate GH Token for todoon app
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: 853479
          private-key: ${{ secrets.todoon_client_pem }}
      #
      - name: Parse TODO-or-not version and install
        run: |
          python -m pip install --upgrade pip
          TODOON_VERSION="${{ inputs.todoon_version }}"
          CMD="python -m pip install todo-or-not"
          if [ -n "$TODOON_VERSION" ]; then
            CMD="$CMD==$TODOON_VERSION"
          fi
          $CMD
      #
      - name: Parse todoon options
        run: |
          echo "ENABLE_ISSUES=${{ inputs.issues }}" >> $GITHUB_ENV
          echo "ENABLE_SILENT=${{ inputs.can_fail }}" >> $GITHUB_ENV
          
          if [ "${{ inputs.closed_issue_check }}" -eq -1 ]; then
            echo "ENABLE_CLOSED_ISSUE_CHECK=false" >> $GITHUB_ENV
          else
            echo "ENABLE_CLOSED_ISSUE_CHECK=true" >> $GITHUB_ENV
          fi

          VERBOSITY=""
          case "${{ inputs.verbosity }}" in
            "0")
              VERBOSITY="--very-quiet"
              ;;
            "1")
              VERBOSITY="--quiet"
              ;;
            "3")
              VERBOSITY="--verbose"
              ;;
          esac
          echo "ENABLE_VERBOSITY=$VERBOSITY" >> $GITHUB_ENV
      #
      - name: Construct todoon command
        run: |
          CMD="todoon --github-env $ENABLE_VERBOSITY"

          if [ "${ENABLE_ISSUES}" = "true" ]; then
            CMD="$CMD --issue"
          fi
          
          if [ "${ENABLE_SILENT}" = "true" ]; then
            CMD="$CMD --silent"
          fi
          echo "COMMAND=$CMD" >> $GITHUB_ENV
      #
      - name: Run TODO-or-not
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          MAXIMUM_ISSUES_GENERATED: ${{ inputs.max_issues }}
        run: |
          $COMMAND
      #
      - name: Check duplicate closed issues (if applicable)
        run: |
          if [[ "$ENABLE_CLOSED_ISSUE_CHECK" = "true" && "${{ env.TODOON_DUPLICATE_CLOSED_ISSUES }}" -gt "${{ inputs.closed_issue_check }}" ]]; then
            echo "Detected ${{ env.TODOON_DUPLICATE_CLOSED_ISSUES }} duplicate closed issues where we expected ${{ inputs.closed_issue_check }}, failing this workflow!"
            exit 1
          fi
